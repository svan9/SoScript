"use strict";
// Generated from ./src/antlr/sos.g4 by ANTLR 4.9.0-SNAPSHOT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sosLexer = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class sosLexer extends Lexer_1.Lexer {
    static T__0 = 1;
    static T__1 = 2;
    static T__2 = 3;
    static T__3 = 4;
    static T__4 = 5;
    static T__5 = 6;
    static T__6 = 7;
    static T__7 = 8;
    static T__8 = 9;
    static T__9 = 10;
    static T__10 = 11;
    static T__11 = 12;
    static FUNCTION_KW = 13;
    static RETURN_KW = 14;
    static END_OF_EXPR = 15;
    static MACROS_KW = 16;
    static OPERATOR_SYMBOLS = 17;
    static ASSERT_NAME = 18;
    static STRING = 19;
    static CHAR = 20;
    static NUMBER = 21;
    static DIGITS = 22;
    static VERY_POSITIV_NUMBER = 23;
    static VERY_NEGATIVE_NUMBER = 24;
    static FLOATING_NUMBER = 25;
    static SPLITED_NUMBER = 26;
    static WS = 27;
    static COMMENT_SINGLELINE = 28;
    // tslint:disable:no-trailing-whitespace
    static channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    static modeNames = [
        "DEFAULT_MODE",
    ];
    static ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
        "T__9", "T__10", "T__11", "FUNCTION_KW", "RETURN_KW", "END_OF_EXPR", "MACROS_KW",
        "OPERATOR_SYMBOLS", "ASSERT_NAME", "STRING", "CHAR", "NUMBER", "DIGITS",
        "VERY_POSITIV_NUMBER", "VERY_NEGATIVE_NUMBER", "FLOATING_NUMBER", "SPLITED_NUMBER",
        "WS", "COMMENT_SINGLELINE",
    ];
    static _LITERAL_NAMES = [
        undefined, "'('", "','", "')'", "'{'", "'}'", "'->'", "'['", "']'", "'%'",
        "'&'", "'~'", "'***'", "'function'", "'return'", "';'", "'@macros'",
    ];
    static _SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, undefined, undefined, "FUNCTION_KW",
        "RETURN_KW", "END_OF_EXPR", "MACROS_KW", "OPERATOR_SYMBOLS", "ASSERT_NAME",
        "STRING", "CHAR", "NUMBER", "DIGITS", "VERY_POSITIV_NUMBER", "VERY_NEGATIVE_NUMBER",
        "FLOATING_NUMBER", "SPLITED_NUMBER", "WS", "COMMENT_SINGLELINE",
    ];
    static VOCABULARY = new VocabularyImpl_1.VocabularyImpl(sosLexer._LITERAL_NAMES, sosLexer._SYMBOLIC_NAMES, []);
    // @Override
    // @NotNull
    get vocabulary() {
        return sosLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(sosLexer._ATN, this);
    }
    // @Override
    get grammarFileName() { return "sos.g4"; }
    // @Override
    get ruleNames() { return sosLexer.ruleNames; }
    // @Override
    get serializedATN() { return sosLexer._serializedATN; }
    // @Override
    get channelNames() { return sosLexer.channelNames; }
    // @Override
    get modeNames() { return sosLexer.modeNames; }
    static _serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xC1\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
        "\x1C\x04\x1D\t\x1D\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
        "\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
        "\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03" +
        "\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
        "\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
        "\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
        "\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x06\x12x\n\x12\r\x12\x0E" +
        "\x12y\x03\x13\x03\x13\x07\x13~\n\x13\f\x13\x0E\x13\x81\v\x13\x03\x14\x03" +
        "\x14\x03\x14\x03\x14\x07\x14\x87\n\x14\f\x14\x0E\x14\x8A\v\x14\x03\x14" +
        "\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\x92\n\x15\x03\x15\x03" +
        "\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\x9B\n\x16\x03\x17" +
        "\x06\x17\x9E\n\x17\r\x17\x0E\x17\x9F\x03\x18\x03\x18\x03\x18\x03\x19\x03" +
        "\x19\x03\x19\x03\x1A\x05\x1A\xA9\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B" +
        "\x03\x1B\x03\x1B\x06\x1B\xB1\n\x1B\r\x1B\x0E\x1B\xB2\x03\x1C\x03\x1C\x03" +
        "\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xBD\n\x1D\f\x1D\x0E" +
        "\x1D\xC0\v\x1D\x02\x02\x02\x1E\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
        "\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
        "\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%" +
        "\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B" +
        "5\x02\x1C7\x02\x1D9\x02\x1E\x03\x02\t\x06\x02&&C\\aac|\x07\x02&&2;C\\" +
        "aac|\x03\x02$$\x03\x02))\x03\x022;\x05\x02\f\f\x0F\x0F\"\"\x04\x02\f\f" +
        "\x0F\x0F\x02\xCD\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
        "\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
        "\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
        "\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
        "\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
        "\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
        "\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
        "-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
        "\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
        "\x03;\x03\x02\x02\x02\x05=\x03\x02\x02\x02\x07?\x03\x02\x02\x02\tA\x03" +
        "\x02\x02\x02\vC\x03\x02\x02\x02\rE\x03\x02\x02\x02\x0FH\x03\x02\x02\x02" +
        "\x11J\x03\x02\x02\x02\x13L\x03\x02\x02\x02\x15N\x03\x02\x02\x02\x17P\x03" +
        "\x02\x02\x02\x19R\x03\x02\x02\x02\x1BV\x03\x02\x02\x02\x1D_\x03\x02\x02" +
        "\x02\x1Ff\x03\x02\x02\x02!h\x03\x02\x02\x02#w\x03\x02\x02\x02%{\x03\x02" +
        "\x02\x02\'\x82\x03\x02\x02\x02)\x8D\x03\x02\x02\x02+\x9A\x03\x02\x02\x02" +
        "-\x9D\x03\x02\x02\x02/\xA1\x03\x02\x02\x021\xA4\x03\x02\x02\x023\xA8\x03" +
        "\x02\x02\x025\xAD\x03\x02\x02\x027\xB4\x03\x02\x02\x029\xB8\x03\x02\x02" +
        "\x02;<\x07*\x02\x02<\x04\x03\x02\x02\x02=>\x07.\x02\x02>\x06\x03\x02\x02" +
        "\x02?@\x07+\x02\x02@\b\x03\x02\x02\x02AB\x07}\x02\x02B\n\x03\x02\x02\x02" +
        "CD\x07\x7F\x02\x02D\f\x03\x02\x02\x02EF\x07/\x02\x02FG\x07@\x02\x02G\x0E" +
        "\x03\x02\x02\x02HI\x07]\x02\x02I\x10\x03\x02\x02\x02JK\x07_\x02\x02K\x12" +
        "\x03\x02\x02\x02LM\x07\'\x02\x02M\x14\x03\x02\x02\x02NO\x07(\x02\x02O" +
        "\x16\x03\x02\x02\x02PQ\x07\x80\x02\x02Q\x18\x03\x02\x02\x02RS\x07,\x02" +
        "\x02ST\x07,\x02\x02TU\x07,\x02\x02U\x1A\x03\x02\x02\x02VW\x07h\x02\x02" +
        "WX\x07w\x02\x02XY\x07p\x02\x02YZ\x07e\x02\x02Z[\x07v\x02\x02[\\\x07k\x02" +
        "\x02\\]\x07q\x02\x02]^\x07p\x02\x02^\x1C\x03\x02\x02\x02_`\x07t\x02\x02" +
        "`a\x07g\x02\x02ab\x07v\x02\x02bc\x07w\x02\x02cd\x07t\x02\x02de\x07p\x02" +
        "\x02e\x1E\x03\x02\x02\x02fg\x07=\x02\x02g \x03\x02\x02\x02hi\x07B\x02" +
        "\x02ij\x07o\x02\x02jk\x07c\x02\x02kl\x07e\x02\x02lm\x07t\x02\x02mn\x07" +
        "q\x02\x02no\x07u\x02\x02o\"\x03\x02\x02\x02pq\x07?\x02\x02qr\x07/\x02" +
        "\x02rs\x07-\x02\x02st\x07,\x02\x02tu\x07`\x02\x02uv\x07>\x02\x02vx\x07" +
        "@\x02\x02wp\x03\x02\x02\x02xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03" +
        "\x02\x02\x02z$\x03\x02\x02\x02{\x7F\t\x02\x02\x02|~\t\x03\x02\x02}|\x03" +
        "\x02\x02\x02~\x81\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02" +
        "\x02\x02\x80&\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x82\x88\x07$\x02" +
        "\x02\x83\x84\x07^\x02\x02\x84\x87\x07$\x02\x02\x85\x87\n\x04\x02\x02\x86" +
        "\x83\x03\x02\x02\x02\x86\x85\x03\x02\x02\x02\x87\x8A\x03\x02\x02\x02\x88" +
        "\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x8B\x03\x02\x02\x02\x8A" +
        "\x88\x03\x02\x02\x02\x8B\x8C\x07$\x02\x02\x8C(\x03\x02\x02\x02\x8D\x91" +
        "\x07)\x02\x02\x8E\x8F\x07^\x02\x02\x8F\x92\x07)\x02\x02\x90\x92\n\x05" +
        "\x02\x02\x91\x8E\x03\x02\x02\x02\x91\x90\x03\x02\x02\x02\x92\x93\x03\x02" +
        "\x02\x02\x93\x94\x07)\x02\x02\x94*\x03\x02\x02\x02\x95\x9B\x053\x1A\x02" +
        "\x96\x9B\x055\x1B\x02\x97\x9B\x051\x19\x02\x98\x9B\x05/\x18\x02\x99\x9B" +
        "\x05-\x17\x02\x9A\x95\x03\x02\x02\x02\x9A\x96\x03\x02\x02\x02\x9A\x97" +
        "\x03\x02\x02\x02\x9A\x98\x03\x02\x02\x02\x9A\x99\x03\x02\x02\x02\x9B," +
        "\x03\x02\x02\x02\x9C\x9E\t\x06\x02\x02\x9D\x9C\x03\x02\x02\x02\x9E\x9F" +
        "\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0." +
        "\x03\x02\x02\x02\xA1\xA2\x07-\x02\x02\xA2\xA3\x05-\x17\x02\xA30\x03\x02" +
        "\x02\x02\xA4\xA5\x07/\x02\x02\xA5\xA6\x05-\x17\x02\xA62\x03\x02\x02\x02" +
        "\xA7\xA9\x05-\x17\x02\xA8\xA7\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02" +
        "\xA9\xAA\x03\x02\x02\x02\xAA\xAB\x070\x02\x02\xAB\xAC\x05-\x17\x02\xAC" +
        "4\x03\x02\x02\x02\xAD\xB0\x05-\x17\x02\xAE\xAF\x07a\x02\x02\xAF\xB1\x05" +
        "-\x17\x02\xB0\xAE\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB2\xB0\x03" +
        "\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB36\x03\x02\x02\x02\xB4\xB5\t\x07" +
        "\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB7\b\x1C\x02\x02\xB78\x03\x02\x02" +
        "\x02\xB8\xB9\x071\x02\x02\xB9\xBA\x071\x02\x02\xBA\xBE\x03\x02\x02\x02" +
        "\xBB\xBD\n\b\x02\x02\xBC\xBB\x03\x02\x02\x02\xBD\xC0\x03\x02\x02\x02\xBE" +
        "\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF:\x03\x02\x02\x02\xC0" +
        "\xBE\x03\x02\x02\x02\r\x02y\x7F\x86\x88\x91\x9A\x9F\xA8\xB2\xBE\x03\b" +
        "\x02\x02";
    static __ATN;
    static get _ATN() {
        if (!sosLexer.__ATN) {
            sosLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(sosLexer._serializedATN));
        }
        return sosLexer.__ATN;
    }
}
exports.sosLexer = sosLexer;
//# sourceMappingURL=sosLexer.js.map