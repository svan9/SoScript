"use strict";
// Generated from ./src/antlr/sos.g4 by ANTLR 4.9.0-SNAPSHOT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sosLexer = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class sosLexer extends Lexer_1.Lexer {
    static T__0 = 1;
    static T__1 = 2;
    static T__2 = 3;
    static T__3 = 4;
    static T__4 = 5;
    static T__5 = 6;
    static T__6 = 7;
    static T__7 = 8;
    static T__8 = 9;
    static T__9 = 10;
    static FUNCTION_KW = 11;
    static RETURN_KW = 12;
    static END_OF_EXPR = 13;
    static OPERATOR_SYMBOLS = 14;
    static ASSERT_NAME = 15;
    static NAME = 16;
    static TYPE = 17;
    static STRING = 18;
    static CHAR = 19;
    static NUMBER = 20;
    static DIGITS = 21;
    static VERY_POSITIV_NUMBER = 22;
    static VERY_NEGATIVE_NUMBER = 23;
    static FLOATING_NUMBER = 24;
    static SPLITED_NUMBER = 25;
    static WS = 26;
    // tslint:disable:no-trailing-whitespace
    static channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    static modeNames = [
        "DEFAULT_MODE",
    ];
    static ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
        "T__9", "FUNCTION_KW", "RETURN_KW", "END_OF_EXPR", "OPERATOR_SYMBOLS",
        "ASSERT_NAME", "NAME", "TYPE", "STRING", "CHAR", "NUMBER", "DIGITS", "VERY_POSITIV_NUMBER",
        "VERY_NEGATIVE_NUMBER", "FLOATING_NUMBER", "SPLITED_NUMBER", "WS",
    ];
    static _LITERAL_NAMES = [
        undefined, "'('", "','", "')'", "'{'", "'}'", "'->'", "'['", "']'", "'&'",
        "'~'", "'function'", "'return'", "';'",
    ];
    static _SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, undefined,
        undefined, undefined, undefined, undefined, "FUNCTION_KW", "RETURN_KW",
        "END_OF_EXPR", "OPERATOR_SYMBOLS", "ASSERT_NAME", "NAME", "TYPE", "STRING",
        "CHAR", "NUMBER", "DIGITS", "VERY_POSITIV_NUMBER", "VERY_NEGATIVE_NUMBER",
        "FLOATING_NUMBER", "SPLITED_NUMBER", "WS",
    ];
    static VOCABULARY = new VocabularyImpl_1.VocabularyImpl(sosLexer._LITERAL_NAMES, sosLexer._SYMBOLIC_NAMES, []);
    // @Override
    // @NotNull
    get vocabulary() {
        return sosLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(sosLexer._ATN, this);
    }
    // @Override
    get grammarFileName() { return "sos.g4"; }
    // @Override
    get ruleNames() { return sosLexer.ruleNames; }
    // @Override
    get serializedATN() { return sosLexer._serializedATN; }
    // @Override
    get channelNames() { return sosLexer.channelNames; }
    // @Override
    get modeNames() { return sosLexer.modeNames; }
    static _serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\xAA\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
        "\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
        "\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
        "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
        "\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
        "\x0F\x03\x0F\x03\x0F\x06\x0Ff\n\x0F\r\x0F\x0E\x0Fg\x03\x10\x03\x10\x07" +
        "\x10l\n\x10\f\x10\x0E\x10o\v\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13" +
        "\x03\x13\x03\x13\x03\x13\x07\x13y\n\x13\f\x13\x0E\x13|\v\x13\x03\x13\x03" +
        "\x13\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\x84\n\x14\x03\x14\x03\x14" +
        "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\x8D\n\x15\x03\x16\x06" +
        "\x16\x90\n\x16\r\x16\x0E\x16\x91\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
        "\x03\x18\x03\x19\x05\x19\x9B\n\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03" +
        "\x1A\x03\x1A\x06\x1A\xA3\n\x1A\r\x1A\x0E\x1A\xA4\x03\x1B\x03\x1B\x03\x1B" +
        "\x03\x1B\x02\x02\x02\x1C\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
        "\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
        "\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
        "\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
        "\x1C\x03\x02\b\x06\x02&&C\\aac|\x07\x02&&2;C\\aac|\x03\x02$$\x03\x02)" +
        ")\x03\x022;\x05\x02\f\f\x0F\x0F\"\"\x02\xB5\x02\x03\x03\x02\x02\x02\x02" +
        "\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
        "\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
        "\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
        "\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
        "\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
        "\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
        "\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
        "1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x037\x03\x02" +
        "\x02\x02\x059\x03\x02\x02\x02\x07;\x03\x02\x02\x02\t=\x03\x02\x02\x02" +
        "\v?\x03\x02\x02\x02\rA\x03\x02\x02\x02\x0FD\x03\x02\x02\x02\x11F\x03\x02" +
        "\x02\x02\x13H\x03\x02\x02\x02\x15J\x03\x02\x02\x02\x17L\x03\x02\x02\x02" +
        "\x19U\x03\x02\x02\x02\x1B\\\x03\x02\x02\x02\x1De\x03\x02\x02\x02\x1Fi" +
        "\x03\x02\x02\x02!p\x03\x02\x02\x02#r\x03\x02\x02\x02%t\x03\x02\x02\x02" +
        "\'\x7F\x03\x02\x02\x02)\x8C\x03\x02\x02\x02+\x8F\x03\x02\x02\x02-\x93" +
        "\x03\x02\x02\x02/\x96\x03\x02\x02\x021\x9A\x03\x02\x02\x023\x9F\x03\x02" +
        "\x02\x025\xA6\x03\x02\x02\x0278\x07*\x02\x028\x04\x03\x02\x02\x029:\x07" +
        ".\x02\x02:\x06\x03\x02\x02\x02;<\x07+\x02\x02<\b\x03\x02\x02\x02=>\x07" +
        "}\x02\x02>\n\x03\x02\x02\x02?@\x07\x7F\x02\x02@\f\x03\x02\x02\x02AB\x07" +
        "/\x02\x02BC\x07@\x02\x02C\x0E\x03\x02\x02\x02DE\x07]\x02\x02E\x10\x03" +
        "\x02\x02\x02FG\x07_\x02\x02G\x12\x03\x02\x02\x02HI\x07(\x02\x02I\x14\x03" +
        "\x02\x02\x02JK\x07\x80\x02\x02K\x16\x03\x02\x02\x02LM\x07h\x02\x02MN\x07" +
        "w\x02\x02NO\x07p\x02\x02OP\x07e\x02\x02PQ\x07v\x02\x02QR\x07k\x02\x02" +
        "RS\x07q\x02\x02ST\x07p\x02\x02T\x18\x03\x02\x02\x02UV\x07t\x02\x02VW\x07" +
        "g\x02\x02WX\x07v\x02\x02XY\x07w\x02\x02YZ\x07t\x02\x02Z[\x07p\x02\x02" +
        "[\x1A\x03\x02\x02\x02\\]\x07=\x02\x02]\x1C\x03\x02\x02\x02^_\x07?\x02" +
        "\x02_`\x07/\x02\x02`a\x07-\x02\x02ab\x07,\x02\x02bc\x07`\x02\x02cd\x07" +
        ">\x02\x02df\x07@\x02\x02e^\x03\x02\x02\x02fg\x03\x02\x02\x02ge\x03\x02" +
        "\x02\x02gh\x03\x02\x02\x02h\x1E\x03\x02\x02\x02im\t\x02\x02\x02jl\t\x03" +
        "\x02\x02kj\x03\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02" +
        "\x02\x02n \x03\x02\x02\x02om\x03\x02\x02\x02pq\x05\x1F\x10\x02q\"\x03" +
        "\x02\x02\x02rs\x05\x1F\x10\x02s$\x03\x02\x02\x02tz\x07$\x02\x02uv\x07" +
        "^\x02\x02vy\x07$\x02\x02wy\n\x04\x02\x02xu\x03\x02\x02\x02xw\x03\x02\x02" +
        "\x02y|\x03\x02\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{}\x03\x02\x02" +
        "\x02|z\x03\x02\x02\x02}~\x07$\x02\x02~&\x03\x02\x02\x02\x7F\x83\x07)\x02" +
        "\x02\x80\x81\x07^\x02\x02\x81\x84\x07)\x02\x02\x82\x84\n\x05\x02\x02\x83" +
        "\x80\x03\x02\x02\x02\x83\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85" +
        "\x86\x07)\x02\x02\x86(\x03\x02\x02\x02\x87\x8D\x051\x19\x02\x88\x8D\x05" +
        "3\x1A\x02\x89\x8D\x05/\x18\x02\x8A\x8D\x05-\x17\x02\x8B\x8D\x05+\x16\x02" +
        "\x8C\x87\x03\x02\x02\x02\x8C\x88\x03\x02\x02\x02\x8C\x89\x03\x02\x02\x02" +
        "\x8C\x8A\x03\x02\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D*\x03\x02\x02\x02" +
        "\x8E\x90\t\x06\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02" +
        "\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92,\x03\x02\x02\x02" +
        "\x93\x94\x07-\x02\x02\x94\x95\x05+\x16\x02\x95.\x03\x02\x02\x02\x96\x97" +
        "\x07/\x02\x02\x97\x98\x05+\x16\x02\x980\x03\x02\x02\x02\x99\x9B\x05+\x16" +
        "\x02\x9A\x99\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9C\x03\x02\x02" +
        "\x02\x9C\x9D\x070\x02\x02\x9D\x9E\x05+\x16\x02\x9E2\x03\x02\x02\x02\x9F" +
        "\xA2\x05+\x16\x02\xA0\xA1\x07a\x02\x02\xA1\xA3\x05+\x16\x02\xA2\xA0\x03" +
        "\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03" +
        "\x02\x02\x02\xA54\x03\x02\x02\x02\xA6\xA7\t\x07\x02\x02\xA7\xA8\x03\x02" +
        "\x02\x02\xA8\xA9\b\x1B\x02\x02\xA96\x03\x02\x02\x02\f\x02gmxz\x83\x8C" +
        "\x91\x9A\xA4\x03\b\x02\x02";
    static __ATN;
    static get _ATN() {
        if (!sosLexer.__ATN) {
            sosLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(sosLexer._serializedATN));
        }
        return sosLexer.__ATN;
    }
}
exports.sosLexer = sosLexer;
//# sourceMappingURL=sosLexer.js.map