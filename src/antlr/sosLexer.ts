// Generated from ./src/antlr/sos.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class sosLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly FUNCTION_KW = 18;
	public static readonly RETURN_KW = 19;
	public static readonly END_OF_EXPR = 20;
	public static readonly MACROS_KW = 21;
	public static readonly DEFINE_KW = 22;
	public static readonly OPERATOR_SYMBOLS = 23;
	public static readonly ASSERT_NAME = 24;
	public static readonly STRING = 25;
	public static readonly CHAR = 26;
	public static readonly NUMBER = 27;
	public static readonly DIGITS = 28;
	public static readonly VERY_POSITIV_NUMBER = 29;
	public static readonly VERY_NEGATIVE_NUMBER = 30;
	public static readonly FLOATING_NUMBER = 31;
	public static readonly SPLITED_NUMBER = 32;
	public static readonly WS = 33;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"FUNCTION_KW", "RETURN_KW", "END_OF_EXPR", "MACROS_KW", "DEFINE_KW", "OPERATOR_SYMBOLS", 
		"ASSERT_NAME", "STRING", "CHAR", "NUMBER", "DIGITS", "VERY_POSITIV_NUMBER", 
		"VERY_NEGATIVE_NUMBER", "FLOATING_NUMBER", "SPLITED_NUMBER", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "','", "')'", "'{'", "'}'", "'->'", "'as'", "'['", "']'", 
		"'.'", "'%'", "'&'", "'~'", "'//'", "'\n'", "'\r'", "'***'", "'function'", 
		"'return'", "';'", "'@macros'", "'@define'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "FUNCTION_KW", "RETURN_KW", 
		"END_OF_EXPR", "MACROS_KW", "DEFINE_KW", "OPERATOR_SYMBOLS", "ASSERT_NAME", 
		"STRING", "CHAR", "NUMBER", "DIGITS", "VERY_POSITIV_NUMBER", "VERY_NEGATIVE_NUMBER", 
		"FLOATING_NUMBER", "SPLITED_NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(sosLexer._LITERAL_NAMES, sosLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return sosLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(sosLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "sos.g4"; }

	// @Override
	public get ruleNames(): string[] { return sosLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return sosLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return sosLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return sosLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02#\xD0\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n" +
		"\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x06\x18\x90" +
		"\n\x18\r\x18\x0E\x18\x91\x03\x19\x03\x19\x07\x19\x96\n\x19\f\x19\x0E\x19" +
		"\x99\v\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\x9F\n\x1A\f\x1A\x0E" +
		"\x1A\xA2\v\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B" +
		"\xAA\n\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05" +
		"\x1C\xB3\n\x1C\x03\x1D\x06\x1D\xB6\n\x1D\r\x1D\x0E\x1D\xB7\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x05 \xC1\n \x03 \x03 \x03 \x03" +
		"!\x03!\x03!\x06!\xC9\n!\r!\x0E!\xCA\x03\"\x03\"\x03\"\x03\"\x02\x02\x02" +
		"#\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
		"+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E" +
		";\x02\x1F=\x02 ?\x02!A\x02\"C\x02#\x03\x02\t\x06\x02,-//>@``\x06\x02&" +
		"&C\\aac|\x07\x02&&2;C\\aac|\x03\x02$$\x03\x02))\x03\x022;\x05\x02\f\f" +
		"\x0F\x0F\"\"\x02\xDB\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13" +
		"\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19" +
		"\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
		"\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02" +
		"\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
		"\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03" +
		"\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02" +
		"\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02" +
		"A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x03E\x03\x02\x02\x02\x05G\x03\x02" +
		"\x02\x02\x07I\x03\x02\x02\x02\tK\x03\x02\x02\x02\vM\x03\x02\x02\x02\r" +
		"O\x03\x02\x02\x02\x0FR\x03\x02\x02\x02\x11U\x03\x02\x02\x02\x13W\x03\x02" +
		"\x02\x02\x15Y\x03\x02\x02\x02\x17[\x03\x02\x02\x02\x19]\x03\x02\x02\x02" +
		"\x1B_\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fd\x03\x02\x02\x02!f\x03" +
		"\x02\x02\x02#h\x03\x02\x02\x02%l\x03\x02\x02\x02\'u\x03\x02\x02\x02)|" +
		"\x03\x02\x02\x02+~\x03\x02\x02\x02-\x86\x03\x02\x02\x02/\x8F\x03\x02\x02" +
		"\x021\x93\x03\x02\x02\x023\x9A\x03\x02\x02\x025\xA5\x03\x02\x02\x027\xB2" +
		"\x03\x02\x02\x029\xB5\x03\x02\x02\x02;\xB9\x03\x02\x02\x02=\xBC\x03\x02" +
		"\x02\x02?\xC0\x03\x02\x02\x02A\xC5\x03\x02\x02\x02C\xCC\x03\x02\x02\x02" +
		"EF\x07*\x02\x02F\x04\x03\x02\x02\x02GH\x07.\x02\x02H\x06\x03\x02\x02\x02" +
		"IJ\x07+\x02\x02J\b\x03\x02\x02\x02KL\x07}\x02\x02L\n\x03\x02\x02\x02M" +
		"N\x07\x7F\x02\x02N\f\x03\x02\x02\x02OP\x07/\x02\x02PQ\x07@\x02\x02Q\x0E" +
		"\x03\x02\x02\x02RS\x07c\x02\x02ST\x07u\x02\x02T\x10\x03\x02\x02\x02UV" +
		"\x07]\x02\x02V\x12\x03\x02\x02\x02WX\x07_\x02\x02X\x14\x03\x02\x02\x02" +
		"YZ\x070\x02\x02Z\x16\x03\x02\x02\x02[\\\x07\'\x02\x02\\\x18\x03\x02\x02" +
		"\x02]^\x07(\x02\x02^\x1A\x03\x02\x02\x02_`\x07\x80\x02\x02`\x1C\x03\x02" +
		"\x02\x02ab\x071\x02\x02bc\x071\x02\x02c\x1E\x03\x02\x02\x02de\x07\f\x02" +
		"\x02e \x03\x02\x02\x02fg\x07\x0F\x02\x02g\"\x03\x02\x02\x02hi\x07,\x02" +
		"\x02ij\x07,\x02\x02jk\x07,\x02\x02k$\x03\x02\x02\x02lm\x07h\x02\x02mn" +
		"\x07w\x02\x02no\x07p\x02\x02op\x07e\x02\x02pq\x07v\x02\x02qr\x07k\x02" +
		"\x02rs\x07q\x02\x02st\x07p\x02\x02t&\x03\x02\x02\x02uv\x07t\x02\x02vw" +
		"\x07g\x02\x02wx\x07v\x02\x02xy\x07w\x02\x02yz\x07t\x02\x02z{\x07p\x02" +
		"\x02{(\x03\x02\x02\x02|}\x07=\x02\x02}*\x03\x02\x02\x02~\x7F\x07B\x02" +
		"\x02\x7F\x80\x07o\x02\x02\x80\x81\x07c\x02\x02\x81\x82\x07e\x02\x02\x82" +
		"\x83\x07t\x02\x02\x83\x84\x07q\x02\x02\x84\x85\x07u\x02\x02\x85,\x03\x02" +
		"\x02\x02\x86\x87\x07B\x02\x02\x87\x88\x07f\x02\x02\x88\x89\x07g\x02\x02" +
		"\x89\x8A\x07h\x02\x02\x8A\x8B\x07k\x02\x02\x8B\x8C\x07p\x02\x02\x8C\x8D" +
		"\x07g\x02\x02\x8D.\x03\x02\x02\x02\x8E\x90\t\x02\x02\x02\x8F\x8E\x03\x02" +
		"\x02\x02\x90\x91\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02" +
		"\x02\x02\x920\x03\x02\x02\x02\x93\x97\t\x03\x02\x02\x94\x96\t\x04\x02" +
		"\x02\x95\x94\x03\x02\x02\x02\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02\x02" +
		"\x02\x97\x98\x03\x02\x02\x02\x982\x03\x02\x02\x02\x99\x97\x03\x02\x02" +
		"\x02\x9A\xA0\x07$\x02\x02\x9B\x9C\x07^\x02\x02\x9C\x9F\x07$\x02\x02\x9D" +
		"\x9F\n\x05\x02\x02\x9E\x9B\x03\x02\x02\x02\x9E\x9D\x03\x02\x02\x02\x9F" +
		"\xA2\x03\x02\x02\x02\xA0\x9E\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1" +
		"\xA3\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA3\xA4\x07$\x02\x02\xA4" +
		"4\x03\x02\x02\x02\xA5\xA9\x07)\x02\x02\xA6\xA7\x07^\x02\x02\xA7\xAA\x07" +
		")\x02\x02\xA8\xAA\n\x06\x02\x02\xA9\xA6\x03\x02\x02\x02\xA9\xA8\x03\x02" +
		"\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAC\x07)\x02\x02\xAC6\x03\x02\x02" +
		"\x02\xAD\xB3\x05? \x02\xAE\xB3\x05A!\x02\xAF\xB3\x05=\x1F\x02\xB0\xB3" +
		"\x05;\x1E\x02\xB1\xB3\x059\x1D\x02\xB2\xAD\x03\x02\x02\x02\xB2\xAE\x03" +
		"\x02\x02\x02\xB2\xAF\x03\x02\x02\x02\xB2\xB0\x03\x02\x02\x02\xB2\xB1\x03" +
		"\x02\x02\x02\xB38\x03\x02\x02\x02\xB4\xB6\t\x07\x02\x02\xB5\xB4\x03\x02" +
		"\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02" +
		"\x02\x02\xB8:\x03\x02\x02\x02\xB9\xBA\x07-\x02\x02\xBA\xBB\x059\x1D\x02" +
		"\xBB<\x03\x02\x02\x02\xBC\xBD\x07/\x02\x02\xBD\xBE\x059\x1D\x02\xBE>\x03" +
		"\x02\x02\x02\xBF\xC1\x059\x1D\x02\xC0\xBF\x03\x02\x02\x02\xC0\xC1\x03" +
		"\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2\xC3\x070\x02\x02\xC3\xC4\x05" +
		"9\x1D\x02\xC4@\x03\x02\x02\x02\xC5\xC8\x059\x1D\x02\xC6\xC7\x07a\x02\x02" +
		"\xC7\xC9\x059\x1D\x02\xC8\xC6\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02" +
		"\xCA\xC8\x03\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCBB\x03\x02\x02\x02" +
		"\xCC\xCD\t\b\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE\xCF\b\"\x02\x02\xCFD" +
		"\x03\x02\x02\x02\f\x02\x91\x97\x9E\xA0\xA9\xB2\xB7\xC0\xCA\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!sosLexer.__ATN) {
			sosLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(sosLexer._serializedATN));
		}

		return sosLexer.__ATN;
	}

}

